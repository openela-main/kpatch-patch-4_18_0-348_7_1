From 7d389a33490309d15530e3372c3045110b3031ab Mon Sep 17 00:00:00 2001
From: Artem Savkov <asavkov@redhat.com>
Date: Tue, 4 Jan 2022 10:40:56 +0100
Subject: [KPATCH CVE-2021-4154] cgroup: verify that source is a string

Kernels:
4.18.0-348.el8
4.18.0-348.2.1.el8_5
4.18.0-348.7.1.el8_5

Changes since last build:
arches: x86_64 ppc64le
cgroup-v1.o: changed function: cgroup1_parse_param
---------------------------

Kpatch-MR: https://gitlab.com/redhat/prdsc/rhel/src/kpatch/rhel-8/-/merge_requests/9
Approved-by: Yannick Cote (@ycote1)
Approved-by: Joe Lawrence (@joe.lawrence)
Kernels:
4.18.0-348.el8
4.18.0-348.2.1.el8_5
4.18.0-348.7.1.el8_5
4.18.0-348.12.2.el8_5

Modifications: none
Z-MR: https://gitlab.com/redhat/rhel/src/kernel/rhel-8/-/merge_requests/1865
CVE: CVE-2021-4154

commit e1ee4bc6e6d8fd36b493fca941b7d5b6e987ae3c
Author: Waiman Long <longman@redhat.com>
Date:   Tue Dec 21 09:47:25 2021 -0500

    cgroup: verify that source is a string

    Bugzilla: https://bugzilla.redhat.com/2034608
    Y-Commit: b6d2fff23b0eee0e82d128f23c4ebd99a30299c3

    O-Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=2034609

    commit 3b0462726e7ef281c35a7a4ae33e93ee2bc9975b
    Author: Christian Brauner <christian.brauner@ubuntu.com>
    Date:   Wed, 14 Jul 2021 15:47:49 +0200

        cgroup: verify that source is a string

        The following sequence can be used to trigger a UAF:

            int fscontext_fd = fsopen("cgroup");
            int fd_null = open("/dev/null, O_RDONLY);
            int fsconfig(fscontext_fd, FSCONFIG_SET_FD, "source", fd_null);
            close_range(3, ~0U, 0);

        The cgroup v1 specific fs parser expects a string for the "source"
        parameter.  However, it is perfectly legitimate to e.g.  specify a file
        descriptor for the "source" parameter.  The fs parser doesn't know what
        a filesystem allows there.  So it's a bug to assume that "source" is
        always of type fs_value_is_string when it can reasonably also be
        fs_value_is_file.

        This assumption in the cgroup code causes a UAF because struct
        fs_parameter uses a union for the actual value.  Access to that union is
        guarded by the param->type member.  Since the cgroup paramter parser
        didn't check param->type but unconditionally moved param->string into
        fc->source a close on the fscontext_fd would trigger a UAF during
        put_fs_context() which frees fc->source thereby freeing the file stashed
        in param->file causing a UAF during a close of the fd_null.

        Fix this by verifying that param->type is actually a string and report
        an error if not.

        In follow up patches I'll add a new generic helper that can be used here
        and by other filesystems instead of this error-prone copy-pasta fix.
        But fixing it in here first makes backporting a it to stable a lot
        easier.

        Fixes: 8d2451f4994f ("cgroup1: switch to option-by-option parsing")
        Reported-by: syzbot+283ce5a46486d6acdbaf@syzkaller.appspotmail.com
        Cc: Christoph Hellwig <hch@lst.de>
        Cc: Alexander Viro <viro@zeniv.linux.org.uk>
        Cc: Dmitry Vyukov <dvyukov@google.com>
        Cc: <stable@kernel.org>
        Cc: syzkaller-bugs <syzkaller-bugs@googlegroups.com>
        Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
        Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Bruno Meneguele <bmeneg@redhat.com>

Signed-off-by: Artem Savkov <asavkov@redhat.com>
---
 kernel/cgroup/cgroup-v1.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/kernel/cgroup/cgroup-v1.c b/kernel/cgroup/cgroup-v1.c
index 852f1349f9d9..291754068ec6 100644
--- a/kernel/cgroup/cgroup-v1.c
+++ b/kernel/cgroup/cgroup-v1.c
@@ -907,6 +907,8 @@ int cgroup1_parse_param(struct fs_context *fc, struct fs_parameter *param)
 	opt = fs_parse(fc, cgroup1_fs_parameters, param, &result);
 	if (opt == -ENOPARAM) {
 		if (strcmp(param->key, "source") == 0) {
+			if (param->type != fs_value_is_string)
+				return invalf(fc, "Non-string source");
 			if (fc->source)
 				return invalf(fc, "Multiple sources not supported");
 			fc->source = param->string;
-- 
2.34.1


